using System;
using System.Linq;
using System.Text;

namespace Levenshtypo;

// The main `State` class was generated by Levenshtypo.Generator

internal class Distance2LevenshteinLevenshtomaton<TCaseSensitivity> : Levenshtomaton where TCaseSensitivity : struct, ICaseSensitivity<TCaseSensitivity>
{
    private string _s;
    private Rune[] _sRune;

    public Distance2LevenshteinLevenshtomaton(string s) : base(s, 2)
    {
        _s = s;
        _sRune = s.EnumerateRunes().ToArray();
    }

    public override bool IgnoreCase => typeof(TCaseSensitivity) == typeof(CaseInsensitive);

    public override LevenshtypoMetric Metric => LevenshtypoMetric.Levenshtein;

    public override T Execute<T>(ILevenshtomatonExecutor<T> executor) => executor.ExecuteAutomaton(StartSpecialized());

    public override bool Matches(ReadOnlySpan<char> text, out int distance) => DefaultMatchesImplementation(text, StartSpecialized(), out distance);

    private State StartSpecialized() => State.Start(_sRune);

    public override LevenshtomatonExecutionState Start() => LevenshtomatonExecutionState.FromStruct(StartSpecialized());

    private readonly struct State : ILevenshtomatonExecutionState<State>
    {
        private static ReadOnlySpan<short> TransitionsData => [0x0B, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x03, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x01, 0x100, 0x04, 0x10B, -1, -1, -1, 0x103, -1, 0x103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x04, 0x10B, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x01, 0x19, 0x100, 0x100, 0x02, 0x0A, 0x10B, 0x101, -1, 0x203, 0x103, 0x104, -1, -1, 0x103, 0x103, -1, 0x203, 0x103, 0x104, -1, -1, 0x103, 0x103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x203, 0x203, 0x104, 0x104, 0x04, 0x02, 0x10B, 0x10B, 0x04, 0x02, 0x10B, 0x10B, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x02, 0x0A, 0x10B, 0x101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x02, 0x02, 0x10B, 0x10B, 0x01, 0x0D, 0x19, 0x19, 0x100, 0x100, 0x100, 0x100, 0x02, 0x06, 0x0A, 0x0A, 0x10B, 0x10C, 0x101, 0x101, -1, 0x303, 0x203, 0x204, 0x103, 0x105, 0x104, 0x102, -1, -1, -1, -1, 0x103, 0x103, 0x103, 0x103, -1, -1, 0x203, 0x203, 0x103, 0x103, 0x104, 0x104, -1, 0x303, -1, 0x303, 0x103, 0x105, 0x103, 0x105, -1, 0x303, 0x203, 0x204, 0x103, 0x105, 0x104, 0x102, -1, -1, -1, -1, 0x103, 0x103, 0x103, 0x103, -1, 0x303, -1, 0x303, 0x103, 0x105, 0x103, 0x105, -1, -1, 0x203, 0x203, 0x103, 0x103, 0x104, 0x104, 0x204, 0x30B, 0x204, 0x30B, 0x102, 0x10A, 0x102, 0x10A, 0x04, 0x04, 0x02, 0x02, 0x10B, 0x10B, 0x10B, 0x10B, 0x04, 0x09, 0x02, 0x06, 0x10B, 0x10C, 0x10B, 0x10C, 0x02, 0x06, 0x0A, 0x0A, 0x10B, 0x10C, 0x101, 0x101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x04, 0x04, 0x02, 0x02, 0x10B, 0x10B, 0x10B, 0x10B, 0x04, 0x09, 0x02, 0x06, 0x10B, 0x10C, 0x10B, 0x10C, 0x06, 0x1A, 0x0A, 0x1C, 0x10C, 0x11D, 0x101, 0x119, 0x303, 0x303, 0x204, 0x204, 0x105, 0x105, 0x102, 0x102, 0x303, 0x303, 0x303, 0x303, 0x105, 0x105, 0x105, 0x105, 0x204, 0x30B, 0x204, 0x30B, 0x102, 0x10A, 0x102, 0x10A, 0x06, 0x1A, 0x06, 0x1A, 0x10C, 0x11D, 0x10C, 0x11D, 0x01, 0x01, 0x0D, 0x0D, 0x19, 0x19, 0x19, 0x19, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x02, 0x02, 0x06, 0x06, 0x0A, 0x0A, 0x0A, 0x0A, 0x10B, 0x10B, 0x10C, 0x10C, 0x101, 0x101, 0x101, 0x101, -1, -1, 0x303, 0x303, 0x203, 0x203, 0x204, 0x204, 0x103, 0x103, 0x105, 0x105, 0x104, 0x104, 0x102, 0x102, -1, -1, -1, -1, -1, -1, -1, -1, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, -1, -1, -1, -1, 0x203, 0x203, 0x203, 0x203, 0x103, 0x103, 0x103, 0x103, 0x104, 0x104, 0x104, 0x104, -1, -1, 0x303, 0x303, -1, -1, 0x303, 0x303, 0x103, 0x103, 0x105, 0x105, 0x103, 0x103, 0x105, 0x105, -1, 0x403, 0x303, 0x304, 0x203, 0x205, 0x204, 0x202, 0x103, 0x107, 0x105, 0x108, 0x104, 0x109, 0x102, 0x106, -1, 0x403, -1, 0x403, -1, 0x403, -1, 0x403, 0x103, 0x107, 0x103, 0x107, 0x103, 0x107, 0x103, 0x107, -1, 0x403, 0x303, 0x304, -1, 0x403, 0x303, 0x304, 0x103, 0x107, 0x105, 0x108, 0x103, 0x107, 0x105, 0x108, -1, 0x403, -1, 0x403, 0x203, 0x205, 0x203, 0x205, 0x103, 0x107, 0x103, 0x107, 0x104, 0x109, 0x104, 0x109, 0x204, 0x202, 0x30B, 0x30B, 0x204, 0x202, 0x30B, 0x30B, 0x102, 0x106, 0x10A, 0x10A, 0x102, 0x106, 0x10A, 0x10A, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x04, 0x04, 0x09, 0x09, 0x02, 0x02, 0x06, 0x06, 0x10B, 0x10B, 0x10C, 0x10C, 0x10B, 0x10B, 0x10C, 0x10C, 0x02, 0x0E, 0x06, 0x12, 0x0A, 0x16, 0x0A, 0x16, 0x10B, 0x117, 0x10C, 0x118, 0x101, 0x10D, 0x101, 0x10D, -1, -1, 0x303, 0x303, 0x203, 0x203, 0x204, 0x204, 0x103, 0x103, 0x105, 0x105, 0x104, 0x104, 0x102, 0x102, -1, -1, -1, -1, -1, -1, -1, -1, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, -1, -1, 0x303, 0x303, -1, -1, 0x303, 0x303, 0x103, 0x103, 0x105, 0x105, 0x103, 0x103, 0x105, 0x105, -1, -1, -1, -1, 0x203, 0x203, 0x203, 0x203, 0x103, 0x103, 0x103, 0x103, 0x104, 0x104, 0x104, 0x104, -1, 0x403, 0x303, 0x304, 0x203, 0x205, 0x204, 0x202, 0x103, 0x107, 0x105, 0x108, 0x104, 0x109, 0x102, 0x106, -1, 0x403, -1, 0x403, -1, 0x403, -1, 0x403, 0x103, 0x107, 0x103, 0x107, 0x103, 0x107, 0x103, 0x107, -1, 0x403, 0x303, 0x304, -1, 0x403, 0x303, 0x304, 0x103, 0x107, 0x105, 0x108, 0x103, 0x107, 0x105, 0x108, -1, 0x403, -1, 0x403, 0x203, 0x205, 0x203, 0x205, 0x103, 0x107, 0x103, 0x107, 0x104, 0x109, 0x104, 0x109, 0x204, 0x202, 0x30B, 0x30B, 0x204, 0x202, 0x30B, 0x30B, 0x102, 0x106, 0x10A, 0x10A, 0x102, 0x106, 0x10A, 0x10A, 0x04, 0x11, 0x04, 0x11, 0x02, 0x0E, 0x02, 0x0E, 0x10B, 0x117, 0x10B, 0x117, 0x10B, 0x117, 0x10B, 0x117, 0x04, 0x11, 0x09, 0x15, 0x02, 0x0E, 0x06, 0x12, 0x10B, 0x117, 0x10C, 0x118, 0x10B, 0x117, 0x10C, 0x118, 0x06, 0x12, 0x1A, 0x1A, 0x0A, 0x16, 0x1C, 0x1C, 0x10C, 0x118, 0x11D, 0x11D, 0x101, 0x10D, 0x119, 0x119, 0x304, 0x40B, 0x304, 0x40B, 0x202, 0x20A, 0x202, 0x20A, 0x108, 0x11B, 0x108, 0x11B, 0x106, 0x11A, 0x106, 0x11A, 0x304, 0x40B, 0x304, 0x40B, 0x304, 0x40B, 0x304, 0x40B, 0x108, 0x11B, 0x108, 0x11B, 0x108, 0x11B, 0x108, 0x11B, 0x202, 0x20A, 0x30B, 0x301, 0x202, 0x20A, 0x30B, 0x301, 0x106, 0x11A, 0x10A, 0x11C, 0x106, 0x11A, 0x10A, 0x11C, 0x06, 0x12, 0x1A, 0x1A, 0x06, 0x12, 0x1A, 0x1A, 0x10C, 0x118, 0x11D, 0x11D, 0x10C, 0x118, 0x11D, 0x11D, 0x01, 0x01, 0x01, 0x01, 0x0D, 0x0D, 0x0D, 0x0D, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x100, 0x02, 0x02, 0x02, 0x02, 0x06, 0x06, 0x06, 0x06, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x10B, 0x10B, 0x10B, 0x10B, 0x10C, 0x10C, 0x10C, 0x10C, 0x101, 0x101, 0x101, 0x101, 0x101, 0x101, 0x101, 0x101, -1, -1, -1, -1, 0x303, 0x303, 0x303, 0x303, 0x203, 0x203, 0x203, 0x203, 0x204, 0x204, 0x204, 0x204, 0x103, 0x103, 0x103, 0x103, 0x105, 0x105, 0x105, 0x105, 0x104, 0x104, 0x104, 0x104, 0x102, 0x102, 0x102, 0x102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, -1, -1, -1, -1, -1, -1, -1, -1, 0x203, 0x203, 0x203, 0x203, 0x203, 0x203, 0x203, 0x203, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x103, 0x104, 0x104, 0x104, 0x104, 0x104, 0x104, 0x104, 0x104, -1, -1, -1, -1, 0x303, 0x303, 0x303, 0x303, -1, -1, -1, -1, 0x303, 0x303, 0x303, 0x303, 0x103, 0x103, 0x103, 0x103, 0x105, 0x105, 0x105, 0x105, 0x103, 0x103, 0x103, 0x103, 0x105, 0x105, 0x105, 0x105, -1, -1, 0x403, 0x403, 0x303, 0x303, 0x304, 0x304, 0x203, 0x203, 0x205, 0x205, 0x204, 0x204, 0x202, 0x202, 0x103, 0x103, 0x107, 0x107, 0x105, 0x105, 0x108, 0x108, 0x104, 0x104, 0x109, 0x109, 0x102, 0x102, 0x106, 0x106, -1, -1, 0x403, 0x403, -1, -1, 0x403, 0x403, -1, -1, 0x403, 0x403, -1, -1, 0x403, 0x403, 0x103, 0x103, 0x107, 0x107, 0x103, 0x103, 0x107, 0x107, 0x103, 0x103, 0x107, 0x107, 0x103, 0x103, 0x107, 0x107, -1, -1, 0x403, 0x403, 0x303, 0x303, 0x304, 0x304, -1, -1, 0x403, 0x403, 0x303, 0x303, 0x304, 0x304, 0x103, 0x103, 0x107, 0x107, 0x105, 0x105, 0x108, 0x108, 0x103, 0x103, 0x107, 0x107, 0x105, 0x105, 0x108, 0x108, -1, -1, 0x403, 0x403, -1, -1, 0x403, 0x403, 0x203, 0x203, 0x205, 0x205, 0x203, 0x203, 0x205, 0x205, 0x103, 0x103, 0x107, 0x107, 0x103, 0x103, 0x107, 0x107, 0x104, 0x104, 0x109, 0x109, 0x104, 0x104, 0x109, 0x109, 0x204, 0x204, 0x202, 0x202, 0x30B, 0x30B, 0x30B, 0x30B, 0x204, 0x204, 0x202, 0x202, 0x30B, 0x30B, 0x30B, 0x30B, 0x102, 0x102, 0x106, 0x106, 0x10A, 0x10A, 0x10A, 0x10A, 0x102, 0x102, 0x106, 0x106, 0x10A, 0x10A, 0x10A, 0x10A, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x10B, 0x04, 0x04, 0x04, 0x04, 0x09, 0x09, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x06, 0x06, 0x06, 0x06, 0x10B, 0x10B, 0x10B, 0x10B, 0x10C, 0x10C, 0x10C, 0x10C, 0x10B, 0x10B, 0x10B, 0x10B, 0x10C, 0x10C, 0x10C, 0x10C, 0x02, 0x02, 0x0E, 0x0E, 0x06, 0x06, 0x12, 0x12, 0x0A, 0x0A, 0x16, 0x16, 0x0A, 0x0A, 0x16, 0x16, 0x10B, 0x10B, 0x117, 0x117, 0x10C, 0x10C, 0x118, 0x118, 0x101, 0x101, 0x10D, 0x10D, 0x101, 0x101, 0x10D, 0x10D, -1, 0x503, -1, 0x503, 0x303, 0x305, 0x303, 0x305, 0x203, 0x207, 0x203, 0x207, 0x204, 0x209, 0x204, 0x209, 0x103, 0x10F, 0x103, 0x10F, 0x105, 0x110, 0x105, 0x110, 0x104, 0x111, 0x104, 0x111, 0x102, 0x10E, 0x102, 0x10E, -1, 0x503, -1, 0x503, -1, 0x503, -1, 0x503, -1, 0x503, -1, 0x503, -1, 0x503, -1, 0x503, 0x103, 0x10F, 0x103, 0x10F, 0x103, 0x10F, 0x103, 0x10F, 0x103, 0x10F, 0x103, 0x10F, 0x103, 0x10F, 0x103, 0x10F, -1, 0x503, -1, 0x503, 0x303, 0x305, 0x303, 0x305, -1, 0x503, -1, 0x503, 0x303, 0x305, 0x303, 0x305, 0x103, 0x10F, 0x103, 0x10F, 0x105, 0x110, 0x105, 0x110, 0x103, 0x10F, 0x103, 0x10F, 0x105, 0x110, 0x105, 0x110, -1, 0x503, -1, 0x503, -1, 0x503, -1, 0x503, 0x203, 0x207, 0x203, 0x207, 0x203, 0x207, 0x203, 0x207, 0x103, 0x10F, 0x103, 0x10F, 0x103, 0x10F, 0x103, 0x10F, 0x104, 0x111, 0x104, 0x111, 0x104, 0x111, 0x104, 0x111, -1, 0x503, 0x403, 0x404, 0x303, 0x305, 0x304, 0x302, 0x203, 0x207, 0x205, 0x208, 0x204, 0x209, 0x202, 0x206, 0x103, 0x10F, 0x107, 0x113, 0x105, 0x110, 0x108, 0x114, 0x104, 0x111, 0x109, 0x115, 0x102, 0x10E, 0x106, 0x112, -1, 0x503, 0x403, 0x404, -1, 0x503, 0x403, 0x404, -1, 0x503, 0x403, 0x404, -1, 0x503, 0x403, 0x404, 0x103, 0x10F, 0x107, 0x113, 0x103, 0x10F, 0x107, 0x113, 0x103, 0x10F, 0x107, 0x113, 0x103, 0x10F, 0x107, 0x113, -1, 0x503, 0x403, 0x404, 0x303, 0x305, 0x304, 0x302, -1, 0x503, 0x403, 0x404, 0x303, 0x305, 0x304, 0x302, 0x103, 0x10F, 0x107, 0x113, 0x105, 0x110, 0x108, 0x114, 0x103, 0x10F, 0x107, 0x113, 0x105, 0x110, 0x108, 0x114, -1, 0x503, 0x403, 0x404, -1, 0x503, 0x403, 0x404, 0x203, 0x207, 0x205, 0x208, 0x203, 0x207, 0x205, 0x208, 0x103, 0x10F, 0x107, 0x113, 0x103, 0x10F, 0x107, 0x113, 0x104, 0x111, 0x109, 0x115, 0x104, 0x111, 0x109, 0x115, 0x204, 0x209, 0x202, 0x206, 0x30B, 0x30C, 0x30B, 0x30C, 0x204, 0x209, 0x202, 0x206, 0x30B, 0x30C, 0x30B, 0x30C, 0x102, 0x10E, 0x106, 0x112, 0x10A, 0x116, 0x10A, 0x116, 0x102, 0x10E, 0x106, 0x112, 0x10A, 0x116, 0x10A, 0x116, 0x04, 0x04, 0x11, 0x11, 0x04, 0x04, 0x11, 0x11, 0x02, 0x02, 0x0E, 0x0E, 0x02, 0x02, 0x0E, 0x0E, 0x10B, 0x10B, 0x117, 0x117, 0x10B, 0x10B, 0x117, 0x117, 0x10B, 0x10B, 0x117, 0x117, 0x10B, 0x10B, 0x117, 0x117, 0x04, 0x04, 0x11, 0x11, 0x09, 0x09, 0x15, 0x15, 0x02, 0x02, 0x0E, 0x0E, 0x06, 0x06, 0x12, 0x12, 0x10B, 0x10B, 0x117, 0x117, 0x10C, 0x10C, 0x118, 0x118, 0x10B, 0x10B, 0x117, 0x117, 0x10C, 0x10C, 0x118, 0x118, 0x06, 0x06, 0x12, 0x12, 0x1A, 0x1A, 0x1A, 0x1A, 0x0A, 0x0A, 0x16, 0x16, 0x1C, 0x1C, 0x1C, 0x1C, 0x10C, 0x10C, 0x118, 0x118, 0x11D, 0x11D, 0x11D, 0x11D, 0x101, 0x101, 0x10D, 0x10D, 0x119, 0x119, 0x119, 0x119, 0x304, 0x302, 0x40B, 0x40B, 0x304, 0x302, 0x40B, 0x40B, 0x202, 0x206, 0x20A, 0x20A, 0x202, 0x206, 0x20A, 0x20A, 0x108, 0x114, 0x11B, 0x11B, 0x108, 0x114, 0x11B, 0x11B, 0x106, 0x112, 0x11A, 0x11A, 0x106, 0x112, 0x11A, 0x11A, 0x304, 0x302, 0x40B, 0x40B, 0x304, 0x302, 0x40B, 0x40B, 0x304, 0x302, 0x40B, 0x40B, 0x304, 0x302, 0x40B, 0x40B, 0x108, 0x114, 0x11B, 0x11B, 0x108, 0x114, 0x11B, 0x11B, 0x108, 0x114, 0x11B, 0x11B, 0x108, 0x114, 0x11B, 0x11B, 0x202, 0x206, 0x20A, 0x20A, 0x30B, 0x30C, 0x301, 0x301, 0x202, 0x206, 0x20A, 0x20A, 0x30B, 0x30C, 0x301, 0x301, 0x106, 0x112, 0x11A, 0x11A, 0x10A, 0x116, 0x11C, 0x11C, 0x106, 0x112, 0x11A, 0x11A, 0x10A, 0x116, 0x11C, 0x11C, 0x06, 0x06, 0x12, 0x12, 0x1A, 0x1A, 0x1A, 0x1A, 0x06, 0x06, 0x12, 0x12, 0x1A, 0x1A, 0x1A, 0x1A, 0x10C, 0x10C, 0x118, 0x118, 0x11D, 0x11D, 0x11D, 0x11D, 0x10C, 0x10C, 0x118, 0x118, 0x11D, 0x11D, 0x11D, 0x11D];
        private static ReadOnlySpan<byte> DistanceData => [0x00, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x02, 0x02, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0xFF, 0xFF, 0xFF, 0x02, 0x02, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF];
        private static ReadOnlySpan<byte> MinDistanceData => [0x00, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01];

        private readonly Rune[] _sRune;
        private readonly int _sIndex;
        private readonly int _state;

        private State(Rune[] sRune, int state, int sIndex)
        {
            _sRune = sRune;
            _state = state;
            _sIndex = sIndex;
        }

        internal static State Start(Rune[] sRune) => new State(sRune, 0, 0);

        public bool MoveNext(Rune c, out State next)
        {
            var sRune = _sRune;
            var sIndex = _sIndex;

            var vectorLength = Math.Min(5, sRune.Length - sIndex);

            var vector = 0;
            foreach (var sChar in sRune.AsSpan().Slice(sIndex, vectorLength))
            {
                vector <<= 1;
                if (default(TCaseSensitivity).Equals(sChar, c))
                {
                    vector |= 1;
                }
            }

            var dStart = 30 * ((1 << vectorLength) - 1);
            var dOffset = _state * (1 << vectorLength) + vector;

            var encodedNext = TransitionsData[dStart + dOffset];

            if (encodedNext >= 0)
            {
                // format:
                // top bit reserved for negative sign
                // next 7 bits reserved for offset (max = 64 is more than enough)
                // next 8 bits is the nextState
                int nextState = encodedNext & 0xFF;
                int offset = (encodedNext >> 8) & 0x3F;
                next = new State(_sRune, nextState, sIndex + offset);
                return true;
            }

            next = default;
            return false;
        }

        public bool IsFinal =>
            0 != ((1ul << _state) & (_sRune.Length - _sIndex) switch
            {
                0 => 0x809ul,
                1 => 0x813ul,
                2 => 0x22001427ul,
                3 => 0x3F8027C0ul,
                4 => 0x1C7FC000ul,
                _ => 0x00ul,
            });

        public int Distance => DistanceData[Math.Min(5, _sRune.Length - _sIndex) * 30 + _state];

        public int MinimumDistance => MinDistanceData[_state];
    }

}
